
/*
<p>
This package provides a standard way to find and execute all those tools, or as they are called here applications.
A simple interface should be used by any component that wants to be executed.
Implementing <code>ExecutableApplication</code> provides the main method <code>executeApplication()</code> and a method for printing a help screen.
The only requirement is that the default constructor must be provided, to allow for a generic instantiation at runtime.
</p>

<p>
The <code>CF</code> can be used to search all or filtered jar files (or URIs) for any class that implement the interface.
Once all implementations are found, one can use the <code>ExecS</code> object with its <code>static main()</code> to execute any application from the command line.
</p>

<p>
The <code>ExecS</code> class allows to list all executable applications, execute one application triggering a help screen and to register short names for applications.
These short names can be used as aliases to execute a application, otherwise a fully qualified class name will be required.
</p>

<p>
One can also extend the <code>ExecS</code> class to build more sophisticated versions of the execution object, to
register specific short names or to search for other interfaces and classes in jar files at runtime.
</p>

<p>
The package can also be used to automatically generate run scripts (batch files for windows or shell scripts for UNIX and Cygwin) to execute applications from command line.
The generators <code>Gen_RunScripts</code>, <code>Gen_RunSh</code>, and <code>Gen_RebaseSh</code> provide functionality for configuring the generation and will generate scripts with all required information (e.g. Java class path).
</p>

*/